name: tests

on:
  push:
  schedule:
    - cron: '0 2 * * *'

jobs:
  check_frontend:
    name: Frontend Checks
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Check
        run: |
          make check_frontend

  check_backend:
    name: Backend Checks
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
        target: [black, isort, pylint, mypy]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Determine exact Python version
        run:
          echo "PYTHON_VERSION=$(python -c 'import platform; print(platform.python_version())')" >> $GITHUB_ENV
      - name: Cache Python dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pip
            ~/.local/lib/python${{ matrix.python-version }}/site-packages
            ~/.local/bin
          key: ${{ runner.os }}-python${{ env.PYTHON_VERSION }}-${{ hashFiles('**/setup.cfg') }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --user -e .[devel]
          echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
      - name: Check
        run: |
          make check_${{ matrix.target }}

  test_installation:
    name: Installation Test
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown
      - uses: Swatinem/rust-cache@v1
        with:
          working-directory: frontend
      - name: Install dependencies
        run: |
          sudo apt install libarchive-tools
          python -m pip install --upgrade pip
          pip install build setuptools_scm
          cargo install --locked trunk
      - name: Test
        run: |
          make test_installation

  test_frontend:
    name: Frontend Tests
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Check
        run: |
          make test_frontend

  test_backend:
    name: Backend Tests
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Determine exact Python version
        run:
          echo "PYTHON_VERSION=$(python -c 'import platform; print(platform.python_version())')" >> $GITHUB_ENV
      - name: Cache Python dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pip
            ~/.local/lib/python${{ matrix.python-version }}/site-packages
            ~/.local/bin
          key: ${{ runner.os }}-python${{ env.PYTHON_VERSION }}-${{ hashFiles('**/setup.cfg') }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --user -e .[devel]
          echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
      - name: Test
        run: |
          make test_backend

  test_e2e:
    name: End-to-End Tests
    runs-on: ubuntu-20.04
    env:
        python-version: "3.10"
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ env.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python-version }}
      - name: Determine exact Python version
        run:
          echo "PYTHON_VERSION=$(python -c 'import platform; print(platform.python_version())')" >> $GITHUB_ENV
      - name: Cache Python dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pip
            ~/.local/lib/python${{ env.python-version }}/site-packages
            ~/.local/bin
          key: ${{ runner.os }}-python${{ env.PYTHON_VERSION }}-${{ hashFiles('**/setup.cfg') }}
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown
      - uses: Swatinem/rust-cache@v1
        with:
          working-directory: frontend
      - name: Install dependencies
        run: |
          sudo apt install libarchive-tools
          python -m pip install --upgrade pip
          pip install build setuptools_scm
          pip install --user -e .[devel]
          cargo install --locked trunk
          echo "PYTHONPATH=$PWD" >> $GITHUB_ENV
      - name: Test
        run: |
          make test_e2e
