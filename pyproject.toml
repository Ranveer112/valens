[build-system]
requires = ['setuptools', 'setuptools_scm>=6.2', 'wheel']
build-backend = 'setuptools.build_meta'

[tool.setuptools_scm]

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py39"
select = [
    "F",    # pyflakes
    "E",    # pycodestyle
    "W",    # pycodestyle
    "C90",  # mccabe
    "I",    # isort
    "N",    # pep8-naming
    "D",    # pydocstyle
    "UP",   # pyupgrade
    "FBT",  # flake8-boolean-trap
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "T10",  # flake8-debugger
    "EXE",  # flake8-executable
    "ISC",  # flake8-implicit-str-concat
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PYI",  # flake8-pyi
    "PT",   # flake8-pytest-style
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "INT",  # flake8-gettext
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate
    "PGH",  # pygrep-hooks
    "PL",   # pylint
    "RUF",  # ruff
]
fixable = [
    "F",    # pyflakes
    "E",    # pycodestyle
    "W",    # pycodestyle
    "C90",  # mccabe
    "I",    # isort
    "N",    # pep8-naming
    "D",    # pydocstyle
    "UP",   # pyupgrade
    "FBT",  # flake8-boolean-trap
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "T10",  # flake8-debugger
    "EXE",  # flake8-executable
    "ISC",  # flake8-implicit-str-concat
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PYI",  # flake8-pyi
    "PT",   # flake8-pytest-style
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "INT",  # flake8-gettext
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "PGH",  # pygrep-hooks
    "PL",   # pylint
    "RUF",  # ruff
]
ignore = [
    "D100",    # public-module
    "D101",    # public-class
    "D102",    # public-method
    "D103",    # public-function
    "D104",    # public-package
    "D105",    # magic-method
    "D106",    # public-nested-class
    "D107",    # public-init
    "D202",    # no-blank-line-after-function
    "D203",    # one-blank-line-before-class
    "D212",    # multi-line-summary-first-line
    "E741",    # ambiguous-variable-name
    "N812",    # lowercase-imported-as-non-lowercase
    "UP007",   # typing-union
    "B011",    # assert-false
    "ARG005",  # unused-lambda-argument
    "PLC0414", # useless-import-alias
    "PLC1901", # compare-to-empty-string
    "PLR2004", # magic-value-comparison
]
line-length = 100

[tool.ruff.isort]
combine-as-imports = true

[tool.ruff.pylint]
max-args = 6
max-branches = 12
max-returns = 10
max-statements = 50

[tool.mypy]
check_untyped_defs = true
disallow_any_explicit = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
no_implicit_reexport = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

plugins = 'sqlalchemy.ext.mypy.plugin'

[[tool.mypy.overrides]]
module = [
    'pytest_alembic.*',
    'sqlalchemy_repr.*',
]
ignore_missing_imports = true

[tool.pytest.ini_options]
addopts = '--tb=short'
filterwarnings = [
    'ignore:Gdk.Cursor.new is deprecated',
    'ignore:Gtk.Widget.set_double_buffered is deprecated',
    'ignore:Gtk.Window.set_wmclass is deprecated',
    'ignore:Gtk.Widget.size_request is deprecated',
]

[tool.coverage.paths]
source = ['valens']

[tool.coverage.run]
branch = true

[tool.coverage.report]
show_missing = true
fail_under = 100
exclude_lines = [
    'pragma: no cover',
    'assert False',
    'def __repr__',
    'def __str__',
    'if TYPE_CHECKING:',
    'raise NotImplementedError',
    'return NotImplemented',
]
